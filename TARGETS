# cd ~/fbsource/fbcode/fblearner/flow/projects/experimental/cactus

# buck build @mode/dev-nosan :download_data --show-output
# buck run src:download_data

# buck build @mode/dev-nosan :train_model --show-output
# buck run @mode/dev-nosan :train_model

# buck build @mode/dev-nosan :train_bpr --show-output
# buck run @mode/dev-nosan :train_bpr

# buck build @mode/dev-nosan :train_autoencoder --show-output
# buck run @mode/dev-nosan :train_autoencoder

# The location of the TARGETS file determines the refernce import.
# This TARGETS is in the main directory so import is reletaive to the top dir, e.g. from src.dataset import ...
#
load("@fbcode_macros//build_defs:python_binary.bzl", "python_binary")
load("@fbcode_macros//build_defs:python_library.bzl", "python_library")

python_library(
    name = "lib",
    deps = [
        # "//fair_infra/data/iopath/iopath:core",
        # "//fair_infra/data/iopath/iopath:iopath",
        "//github/facebookresearch/hydra_master:hydra",
        "//github/third-party/PyTorchLightning/pytorch-lightning:lib",
        "//github/third-party/omry/omegaconf:omegaconf",
        "//manifold/clients/python:manifold_client",
        # "//pytorch/data/fb:core",
        "//pytorch/data/fb:enrichment",
        "//pytorch/data/fb:inline_dataset",
        "//pytorch/data/fb/onbox:data_loader",
        "//pytorch/vision:torchvision",
        "//stl/lightning/callbacks:model_checkpoint",
        # "//stl/lightning/io:filesystem",
        # "//stl/lightning/loggers:all_loggers",
        "//stl/lightning/loggers:manifold_tensorboard_logger",
        # "//stl/lightning/scuba:stl_scuba_logger",
        # "//stl/lightning/tests:test_utils",
        # "//stl/lightning/utilities:config",
        # "//stl/lightning/utilities:env",
    ],
)

python_library(
    name = "cactus",
    srcs = glob(
        [
            "src/*.py",
            "configs/*.yaml",
        ],
    ),
    base_module = "",
    py_version = ">=3.7",
    deps = [":lib"],
)

python_binary(
    name = "download_data",
    srcs = [
        "src/download_data.py",
    ],
    base_module = "",
    main_module = "src.download_data",
    par_style = "xar",
    py_version = ">=3.7",
    deps = [
        ":cactus",
    ],
)

python_binary(
    name = "train_model",
    srcs = [
        "src/train_model.py",
    ],
    base_module = "",
    compile = "with-source",  # necessary for torch.jit
    main_module = "src.train_model",
    par_style = "xar",
    py_version = ">=3.7",
    deps = [
        ":cactus",
    ],
)

python_binary(
    name = "remap_id",
    srcs = [
        "src/remap_id.py",
    ],
    base_module = "",
    compile = "with-source",  # necessary for torch.jit
    main_module = "src.remap_id",
    par_style = "xar",
    py_version = ">=3.7",
    deps = [
        ":cactus",
    ],
)

python_binary(
    name = "train_bpr",
    srcs = [
        "src/train_bpr.py",
    ],
    base_module = "",
    compile = "with-source",  # necessary for torch.jit
    main_module = "src.train_bpr",
    par_style = "xar",
    py_version = ">=3.7",
    deps = [
        ":cactus",
    ],
)

python_binary(
    name = "train_autoencoder",
    srcs = [
        "src/train_autoencoder.py",
    ],
    base_module = "",
    compile = "with-source",  # necessary for torch.jit
    main_module = "src.train_autoencoder",
    par_style = "xar",
    py_version = ">=3.7",
    deps = [
        ":cactus",
    ],
)
